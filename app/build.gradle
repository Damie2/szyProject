apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//腾讯VasDolly多渠道打包插件
//apply plugin: 'channel'

android {
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "com.smh.szyproject"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        //由于在Android Studio pluing 3.0.+以上，如果项目中用到注解，必须显示的声明注释处理器。
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        ndk {
            // armeabi：已经淘汰（0%）
            // armeabi-v7a：曾经主流的架构平台（20%）
            // arm64-v8a：目前主流架构平台（80%）
            abiFilters "armeabi-v7a", "arm64-v8a", 'x86'
        }

        //NDK开发第一步
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    //NDK开发第二步
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    //将Eclipse项目导入到Android studio 中 很多点9图出现问题解决方法,用来关闭Android Studio的PNG合法性检查的，直接不让它检查。
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
//    lint检查
    lintOptions {
        // true--错误发生后停止gradle构建
        abortOnError false
    }


    //==============友盟多渠道配置===============
    flavorDimensions "default"    // 默认渠道名
    // 配置多渠道包支持
    productFlavors {
        Tencent {
            // 投放应用宝市场
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "应用宝"]
            versionCode 2
            versionName "2.0"

        }
        xiaomi {
            // 投放小米市场
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "小米"]
            versionCode 1
            versionName "1.1"
        }
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
    //================友盟多渠道配置============

    // Apk 输出配置
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name
            if (variant.buildType.name == buildTypes.release.getName()) {
                outputFileName += '_' + new Date().format("yyyyMMdd")
            }
            outputFileName += '.apk'
        }
    }
    //打包配置
    signingConfigs {
        mySign {
            keyAlias 'VirtualApp'
            keyPassword 'swkj666!'
            storeFile file('D:\\Virtualkey.jks')
            storePassword 'swkj666!'
        }
    }

    buildTypes {
        debug {
            jniDebuggable true
            // ZipAlign 优化
            zipAlignEnabled false
            // 移除无用的资源文件
            shrinkResources false
            // 设置混淆
            minifyEnabled false
            debuggable true
        }
        release {
            jniDebuggable false
            // ZipAlign 优化
            zipAlignEnabled true
            // 移除无用的资源文件
            shrinkResources true
            // 设置混淆
            minifyEnabled true
            //  proguard-android.txt和proguard-android-optimize.txt区别是optimize开启了Proguard optimize的选项，前者是没有optimize的
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.mySign
        }
    }

    //使用mvvm需要这玩意
    dataBinding {
        enabled true
    }
}
//lib中引入aar文件
repositories {
    flatDir {
        dirs '../app/libs'
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.2.1'
    implementation 'androidx.navigation:navigation-ui:2.2.1'
    implementation 'androidx.preference:preference:1.1.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    //butterknife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    //imageloader
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    //gson
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.google.code.gson:gson-parent:2.8.0'
    //recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    //retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    //okhttp3
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'
    implementation 'com.lzy.net:okgo:3.0.4'
    implementation 'com.qianwen:okhttp-utils:3.8.0'
    //改变状态栏颜色
//    implementation 'com.githang:status-bar-compat:0.7'

    //rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'
    implementation 'com.githang:status-bar-compat:latest.integration'
    implementation 'cc.cloudist.acplibrary:library:1.2.1'
    //Xutils
    implementation 'org.xutils:xutils:3.8.9'
    //下拉刷新
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.5.1'
    // 日志的拦截器，也可以自行选择
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    //鲁班图片压缩
    implementation 'top.zibin:Luban:1.1.8'
    //jsbridge
    implementation 'com.github.lzyzsd:jsbridge:1.0.4'
    //生命周期
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android-lifecycle:2.2.2'
    // autolayout适配
    implementation 'com.zhy:autolayout:1.4.5'
    //今日头条适配
    implementation 'me.jessyan:autosize:1.1.2'
    //glide图片
    implementation 'com.github.bumptech.glide:glide:4.10.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'

    //轮子的权限请求框架
    implementation 'com.hjq:xxpermissions:5.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    //dagger2
    implementation 'com.google.dagger:dagger:2.4'//指定注解处理器
    annotationProcessor 'com.google.dagger:dagger-compiler:2.4'//dagger公共api
    //aspectj  aop
    implementation 'org.aspectj:aspectjrt:1.8.10'
    //viewpager2
    implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha01'
    //support:design  TabLayout 换成这个
    //https://github.com/hackware1993/MagicIndicator   或者换成这个
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.github.hackware1993:MagicIndicator:1.5.0'
    //好用的 TabLayout，标签下标
    implementation 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'
    // 动画解析库：https://github.com/airbnb/lottie-android
    // 动画资源：https://lottiefiles.com/
    implementation 'com.airbnb.android:lottie:3.2.0'
    // 状态栏沉浸：https://github.com/gyf-dev/ImmersionBar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    // 标题栏框架：https://github.com/getActivity/TitleBar
    implementation 'com.hjq:titlebar:6.0'
    // 网络请求框架：https://github.com/getActivity/EasyHttp
//    implementation 'com.hjq:http:5.0'
    //版本更新 https://github.com/azhon/AppUpdate
    implementation 'com.azhon:appupdateX:2.9.0'
    //谷歌的下拉刷新
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    //KProgressHUD dialog
    implementation 'com.kaopiz:kprogresshud:1.2.0'
    //微信分享、登录、收藏、支付
    api 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.3.1'
    //友盟
//    推送的
    //基础组件库依赖(必须) Push 605版本必须升级新版本Common SDK
    implementation 'com.umeng.umsdk:common:2.2.2'
    implementation 'com.umeng.umsdk:utdid:1.5.2'
    //友盟push相关依赖(必须)
    implementation 'com.umeng.umsdk:push:6.0.5'
    implementation 'com.umeng.umsdk:alicloud-httpdns:1.2.5'
    implementation 'com.umeng.umsdk:alicloud-utils:1.1.5'
    implementation 'com.umeng.umsdk:alicloud_beacon:1.0.1'
    implementation 'com.umeng.umsdk:agoo-accs:3.3.8.8-open-fix2'
    implementation 'com.umeng.umsdk:agoo_networksdk:3.5.5'
    implementation 'com.umeng.umsdk:agoo_tlog:3.0.0.17'
    implementation 'com.umeng.umsdk:agoo_tnet4android:3.1.14.9'
    //小米推送
    implementation 'com.umeng.umsdk:xiaomi-push:3.7.0'
    implementation 'com.umeng.umsdk:xiaomi-umengaccs:1.1.4'

//    多任务文件并行下载
    //    https://github.com/AriaLyy/Aria
    implementation 'com.arialyy.aria:core:3.8.7'
    annotationProcessor 'com.arialyy.aria:compiler:3.8.7'
    //腾讯VasDolly多渠道打包
//    api 'com.leon.channel:helper:2.0.3'


    //图片选择器，记得混淆
//    https://github.com/LuckSiege/PictureSelector
//    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.5.1'
    //多任务文件并行下载 工具，好使
//    https://github.com/AriaLyy/Aria
//    // 不小心的蓝牙  https://github.com/aicareles/Android-BLE
//    implementation 'cn.com.superLei:blelibrary:latestVersion'
    //LeakCanary 内存泄漏检测工具
    // debug 版本依赖
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
//    // release 版本依赖
//    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
//    // 如果使用了 support fragment，请同时依赖
//    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'

}

import org.aspectj.tools.ajc.Main


//getJavaCompileProvider
//在构建工程时，执行编织
project.android.applicationVariants.all { variant ->
//    JavaCompile javaCompile = variant.javaCompile
    JavaCompile javaCompile = variant.javaCompileProvider.get()
    //在编译后 增加行为
    javaCompile.doLast {
        println "执行AspectJ编译器......"
        String[] args = [
                "-1.7",
                //aspectJ 处理的源文件
                "-inpath", javaCompile.destinationDir.toString(),
                //输出目录，aspectJ处理完成后的输出目录
                "-d", javaCompile.destinationDir.toString(),
                //aspectJ 编译器的classpath aspectjtools
                "-aspectpath", javaCompile.classpath.asPath,
                //java的类查找路径
                "-classpath", javaCompile.classpath.asPath,
                //覆盖引导类的位置  android中使用android.jar 而不是jdk
                "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        new Main().runMain(args, false)
    }
}

