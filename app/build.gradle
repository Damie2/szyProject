apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//腾讯VasDolly多渠道打包插件
//apply plugin: 'channel'

android {

    compileSdkVersion 30
    buildToolsVersion "30.0.0"

//    minSdkVersion 最低安装版本，APP必须在这个版本等级之上的设备才能安装 将
//    targetSdkVersion目标  告知系统，如果应用的targetSdkVersion比系统版本低，那么在一些新特效上系统会做向下兼容处理，如果想要适配某条android版本，必须要将targetSdkVersion调到这个版本等级之上
//    compileSdkVersion 编译源码版本，我们可以通过修改这个版本等级来改变我们在代码中所看到的 Android SDK 源码的版本，同时也决定了编译器在进行代码检查时所用的版本。

    defaultConfig {
        applicationId "com.smh.szyproject"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 100
        versionName "50.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 仅保留中文语种的资源
        resConfig 'zh'

//        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        //由于在Android Studio pluing 3.0.+以上，如果项目中用到注解，必须显示的声明注释处理器。
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        ndk {
            // armeabi：已经淘汰（0%）
            // armeabi-v7a：曾经主流的架构平台（20%）
            // arm64-v8a：目前主流架构平台（80%）
//            abiFilters "armeabi-v7a", "arm64-v8a", 'x86'
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        //极光IM第一步
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "4188d63f9c639d9edd52418a", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

        //开启Dex分包
        //minSdkVersion大于等于21的时候，系统会自动启动dex，如果minSdkVersion低于21或者更低，需要设置下面的 multiDexEnabled true
//        multiDexEnabled true
//        和
//        implementation 'com.android.support:multidex:1.0.3'

        //NDK开发第一步
        //https://www.jianshu.com/p/921a5142ae12
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    //NDK开发第二步
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    // 设置存放 so 文件的目录
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    // 支持 Java JDK 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    //将Eclipse项目导入到Android studio 中 很多点9图出现问题解决方法,用来关闭Android Studio的PNG合法性检查的，直接不让它检查。
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
//    lint检查
    lintOptions {
        // true--错误发生后停止gradle构建
        abortOnError false
    }


    //==============友盟多渠道配置方式一===============
    // 默认渠道名
//    flavorDimensions "default"
//    // 友盟多渠道打包
//    android.productFlavors {
//        tencent {}  // 应用宝
//        baidu {}    // 百度
//        xiaomi {}   // 小米
//        huawei {}   // 华为
//        heiheihei {}   // 华为
//        productFlavors.all { flavor ->
//            flavor.manifestPlaceholders = [channel: name]
//        }
//    }

    //==============友盟多渠道配置方式一===============

    //==============友盟多渠道配置方式二===============
    flavorDimensions "default"    // 默认渠道名
    // 配置多渠道包支持
    productFlavors {
        Tencent {
            // 投放应用宝市场
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "应用宝"]
            versionCode 2
            versionName "2.0"

        }
        xiaomi {
            // 投放小米市场
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "小米"]
            versionCode 1
            versionName "1.1"
        }
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
    //================友盟多渠道配置方式二============

    // Apk 输出配置
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name
//            if (variant.buildType.name == buildTypes.release.getName()) {
//                outputFileName += '_' + new Date().format("yyyyMMdd")
//            }
//            outputFileName += '.apk'
//        }
//    }
    //打包配置
    signingConfigs {
        mySign {
            keyAlias 'VirtualApp'
            keyPassword 'swkj666!'
            storeFile file('D:\\Virtualkey.jks')
            storePassword 'swkj666!'

//            jks转keystore
//            先生成.p12文件
//            keytool -importkeystore -srckeystore D:\test.jks -srcstoretype JKS -deststoretype PKCS12 -destkeystore test.p12
//            用p12生成keystore
//            keytool -v -importkeystore -srckeystore D:\test.p12 -srcstoretype PKCS12 -destkeystore D:\test.keystore -deststoretype JKS
//            可以通过以下命令来验证
//            keytool -v -list -keystore D:\test.keystore
        }
    }

    buildTypes {
        debug {
            jniDebuggable true
            // ZipAlign 优化
            zipAlignEnabled false
            // 移除无用的资源文件
            shrinkResources false
            // 设置混淆
            minifyEnabled false
            debuggable true
        }
        release {
            // 调试模式开关
            debuggable false
            jniDebuggable false
            // ZipAlign 优化
            zipAlignEnabled true
            // 移除无用的资源文件
            shrinkResources true
            // 设置混淆
            minifyEnabled true
            //  proguard-android.txt和proguard-android-optimize.txt区别是optimize开启了Proguard optimize的选项，前者是没有optimize的
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.mySign
        }
    }

    //使用mvvm需要这玩意
    dataBinding {
        enabled true
    }
}
//lib中引入aar文件
repositories {
    flatDir {
        dirs '../app/libs'
    }
}

//看异常，就用我 gradlew  assembleDebug  --stacktrace
dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //  ==========  jetPack========
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    // Navigation
    implementation 'androidx.navigation:navigation-fragment:2.2.1'
    implementation 'androidx.navigation:navigation-ui:2.2.1'
    // Room
    implementation "androidx.room:room-runtime:2.2.4"
    annotationProcessor "androidx.room:room-compiler:2.2.4"
    // paging
    def paging_version = "2.1.1"
    implementation "androidx.paging:paging-runtime:$paging_version"
//  ==========  jetPack========


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //butterknife
    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'
    //imageloader
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'

    // 轮子的Gson 解析容错：https://github.com/getActivity/GsonFactory
    implementation 'com.hjq.gson:factory:3.0'
    //gson
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.code.gson:gson-parent:2.8.6'
    //recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    //retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    //okhttp3
    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    implementation 'com.lzy.net:okgo:3.0.4'
    implementation 'com.qianwen:okhttp-utils:3.9.5'
    //改变状态栏颜色
//    implementation 'com.githang:status-bar-compat:0.7'

    //rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.1'
//    implementation 'com.githang:status-bar-compat:latest.integration'
    implementation 'cc.cloudist.acplibrary:library:1.2.1'
    //Xutils
    implementation 'org.xutils:xutils:3.8.10'


    // 日志的拦截器，也可以自行选择
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    //鲁班图片压缩
//    implementation 'top.zibin:Luban:1.1.8'
    //jsbridge
    implementation 'com.github.lzyzsd:jsbridge:1.0.4'
    //生命周期
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android-lifecycle:2.2.2'
    // autolayout适配
//    https://github.com/hongyangAndroid/AndroidAutoLayout
    implementation 'com.zhy:autolayout:1.4.5'
    //今日头条适配
    implementation 'me.jessyan:autosize:1.2.1'
    //glide图片
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    //picasso 框架 图片，类似glide
    implementation 'com.squareup.picasso:picasso:2.5.2'
    //轮子的权限请求框架
    implementation 'com.hjq:xxpermissions:10.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    //dagger2
    implementation 'com.google.dagger:dagger:2.4'//指定注解处理器
    annotationProcessor 'com.google.dagger:dagger-compiler:2.4'//dagger公共api
    //aspectj  aop
    implementation 'org.aspectj:aspectjrt:1.9.5'
    //viewpager2
    implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha01'
    //support:design  TabLayout 换成这个
    //https://github.com/hackware1993/MagicIndicator   或者换成这个
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'com.github.hackware1993:MagicIndicator:1.6.0' // for support lib
    implementation 'com.github.hackware1993:MagicIndicator:1.7.0' // for androidx

    //能蠕动的 实现新浪微博/即刻 APP  蠕动 蚯蚓导航效果   https://github.com/auv1107/tablayout-android   需要导入module
//    implementation 'com.github.auv1107:tablayout-android:-SNAPSHOT'

    //好用的 TabLayout，标签下标
    implementation 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'
    // 动画解析库：https://github.com/airbnb/lottie-android
    // 动画资源：https://lottiefiles.com/
    implementation 'com.airbnb.android:lottie:3.2.0'
    // 状态栏沉浸：https://github.com/gyf-dev/ImmersionBar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    // fragment快速实现（可选）
    implementation 'com.gyf.immersionbar:immersionbar-components:3.0.0'
    // 标题栏框架：https://github.com/getActivity/TitleBar
//    implementation 'com.hjq:titlebar:6.0'
    implementation 'com.hjq:titlebar:8.0'
    // 网络请求框架：https://github.com/getActivity/EasyHttp
//    implementation 'com.hjq:http:5.0'
    //版本更新 https://github.com/azhon/AppUpdate
    implementation 'com.azhon:appupdateX:2.9.0'
    //谷歌的下拉刷新
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    //KProgressHUD dialog
    implementation 'com.kaopiz:kprogresshud:1.2.0'
    //微信分享、登录、收藏、支付
    api 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.3.1'
    //友盟
    //推送的
    //基础组件库依赖(必须) Push 605版本必须升级新版本Common SDK
    implementation 'com.umeng.umsdk:common:2.2.2'
    implementation 'com.umeng.umsdk:utdid:1.5.2'
    //友盟push相关依赖(必须)
    implementation 'com.umeng.umsdk:push:6.0.5'
    implementation 'com.umeng.umsdk:alicloud-httpdns:1.2.5'
    implementation 'com.umeng.umsdk:alicloud-utils:1.1.5'
    implementation 'com.umeng.umsdk:alicloud_beacon:1.0.1'
    implementation 'com.umeng.umsdk:agoo-accs:3.3.8.8-open-fix2'
    implementation 'com.umeng.umsdk:agoo_networksdk:3.5.5'
    implementation 'com.umeng.umsdk:agoo_tlog:3.0.0.17'
    implementation 'com.umeng.umsdk:agoo_tnet4android:3.1.14.9'
    //小米推送
    implementation 'com.umeng.umsdk:xiaomi-push:3.7.0'
    implementation 'com.umeng.umsdk:xiaomi-umengaccs:1.1.4'

//    多任务文件并行下载
    //    https://github.com/AriaLyy/Aria
    implementation 'com.arialyy.aria:core:3.8.14'
    annotationProcessor 'com.arialyy.aria:compiler:3.8.14'
    //腾讯VasDolly多渠道打包
//    api 'com.leon.channel:helper:2.0.3'

    //直播需要的库
    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    //armeabi-v7a
    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'
    //armeabi下的so库
    implementation 'tv.danmaku.ijk.media:ijkplayer-armv5:0.8.8'
    //arm64-v8a下的so库
    implementation 'tv.danmaku.ijk.media:ijkplayer-arm64:0.8.8'
    //x86下的so库
    implementation 'tv.danmaku.ijk.media:ijkplayer-x86:0.8.8'
//    x86_64下的so库
    implementation 'tv.danmaku.ijk.media:ijkplayer-x86_64:0.8.8'
//      exo是谷歌下的IjkExoMediaPlayer，如果需要使用的话可以添加
    implementation 'tv.danmaku.ijk.media:ijkplayer-exo:0.8.8'
    //上面是直播库
    //下拉刷新
//    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.5.1'
//    https://github.com/scwang90/SmartRefreshLayout
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.1'      //核心必须依赖
    implementation 'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头
    implementation 'com.scwang.smart:refresh-header-radar:2.0.1'       //雷达刷新头
    implementation 'com.scwang.smart:refresh-header-falsify:2.0.1'     //虚拟刷新头
    implementation 'com.scwang.smart:refresh-header-material:2.0.1'    //谷歌刷新头
    implementation 'com.scwang.smart:refresh-header-two-level:2.0.1'   //二级刷新头
    implementation 'com.scwang.smart:refresh-footer-ball:2.0.1'        //球脉冲加载
    implementation 'com.scwang.smart:refresh-footer-classics:2.0.1'    //经典加载



//    烈焰弹幕使
    implementation 'com.github.ctiao:DanmakuFlameMaster:0.9.25'
    implementation 'com.github.ctiao:ndkbitmap-armv7a:0.9.21'
    //极光IM第二步
    implementation 'cn.jiguang.sdk:jmessage:2.9.2'  // 此处以JMessage 2.9.2 版本为例。
    implementation 'cn.jiguang.sdk:jcore:2.3.0'  // 此处以JCore 2.3.0 版本为例。
    //这是极光IM用到的插件
    implementation 'cn.jiguang.imui:messagelist:0.8.0'
    implementation 'cn.jiguang.imui:chatinput:0.10.0'

//    //环信 第二步   http://docs-im.easemob.com/im/android/sdk/import
//    api 'com.android.support:appcompat-v7:28.0.0-alpha1'
//    // Google firebase cloud messaging
//    implementation 'com.google.android.gms:play-services-base:11.4.0'
//    implementation 'com.google.firebase:firebase-messaging:11.4.0'
//    api 'com.hyphenate:hyphenate-sdk:3.6.8'
//
//    //如果想使用不包含音视频通话的sdk，单独用下面这句就行
////    api 'com.hyphenate:hyphenate-sdk-lite:3.6.8';
    implementation 'com.hyphenate:hyphenate-sdk-lite:3.6.8'
//    //上面是环信第二步

    //环信



    //饺子播放器
    implementation 'cn.jzvd:jiaozivideoplayer:7.4.1'
//    WsManager socket
    implementation 'com.rabtman.wsmanager:wsmanager:1.0.2'
//WebSocket
    implementation "org.java-websocket:Java-WebSocket:1.5.1"

    //阴影效果
    implementation 'com.github.JuHonggang:ShadowDrawable:0.1'

    //bannerViewPager
    implementation 'com.bigkoo:convenientbanner:2.1.5'//地址变小写了，额。。。
    //im 自定义UI
    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.5.8'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
    implementation 'com.nbsp:library:1.8'
    //常用 Dialog    https://github.com/afollestad/material-dialogs，高版本kotlin 暂时不要更新
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'//不要更新

    //安全加密库
    implementation "androidx.security:security-crypto:1.1.0-alpha01"

    //jetPack 下的ktx
    //看这个https://developer.android.google.cn/kotlin/ktx
    implementation "androidx.core:core-ktx:1.3.1"
    implementation "androidx.collection:collection-ktx:1.1.0"// 这个是collection,包含ArrayMap、LongParseArray、LruCache
    implementation "androidx.fragment:fragment-ktx:1.2.5"//Fragment KTX 模块

    //协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha01"

    //eventBus
    implementation 'org.greenrobot:eventbus:3.0.0'
//    implementation 'org.greenrobot:eventbus:3.2.0'
    //Android炫酷的底部切换效果
    implementation 'com.roughike:bottom-bar:2.3.1'

//    viewpager大全
//    https://blog.csdn.net/confusing_awakening/article/details/107635695#Tab_indicatorViewPagerViewPager2_148


    //im直播LiveActivity用到的 共同头部+ViewPager+ListView(AdapterView)|RecyclerView|ScrollView|WebView
    implementation 'com.github.cpoopc:scrollablelayoutlib:1.0.0'

    //轮子的EasyHttp
    implementation 'com.hjq:http:8.6'
    //卡顿检测优化框架  https://github.com/markzhai/AndroidPerformanceMonitor
    implementation 'com.github.markzhai:blockcanary-android:1.5.0'


//    https://github.com/pinguo-zhouwei/MZBannerView  魅族的banner
//    implementation 'com.github.pinguo-zhouwei:MZBannerView:v2.0.2'


    //图片选择器，记得混淆 im上面有用
//    https://github.com/LuckSiege/PictureSelector
//    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.5.9'
    //多任务文件并行下载 工具，好使
//    https://github.com/AriaLyy/Aria
//    // 不小心的蓝牙  https://github.com/aicareles/Android-BLE
//    implementation 'cn.com.superLei:blelibrary:latestVersion'
    //    // 不小心的蓝牙  https://github.com/aicareles/Android-BLE
    implementation 'cn.com.superLei:blelibrary:3.1.0'
    //fastBle 蓝牙https://github.com/Jasonchenlijian/FastBle
    implementation 'com.clj.fastble:FastBleLib:2.3.4'

    //LeakCanary 内存泄漏检测工具
    // debug 版本依赖
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    // release 版本依赖
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
    // 如果使用了 support fragment，请同时依赖
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'

//    什么都没改
//    20Mb
//    17.7 Mb
//    删除ndk1
//    19.9
//    17.5
//    删除友盟多渠道配置2 中间那个==============友盟多渠道配置方式二===============
//    19.9
//    17.5
//    删除Test文件夹及数据库db3
//    17.6
//    15.2
//    减少引入的那些lib以及极光im4
//    极光IM单独占用2M
//    友盟 占用1.7
//    6.18
//    4.67


}

import org.aspectj.tools.ajc.Main
//getJavaCompileProvider
//在构建工程时，执行编织
project.android.applicationVariants.all { variant ->
//    JavaCompile javaCompile = variant.javaCompile
    JavaCompile javaCompile = variant.javaCompileProvider.get()
    //在编译后 增加行为
    javaCompile.doLast {
        println "执行AspectJ编译器......"
        String[] args = [
                "-1.8",
                //aspectJ 处理的源文件
                "-inpath", javaCompile.destinationDir.toString(),
                //输出目录，aspectJ处理完成后的输出目录
                "-d", javaCompile.destinationDir.toString(),
                //aspectJ 编译器的classpath aspectjtools
                "-aspectpath", javaCompile.classpath.asPath,
                //java的类查找路径
                "-classpath", javaCompile.classpath.asPath,
                //覆盖引导类的位置  android中使用android.jar 而不是jdk
                "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        new Main().runMain(args, false)
    }
}

